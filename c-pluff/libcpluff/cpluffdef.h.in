/*-------------------------------------------------------------------------
 * C-Pluff, a plug-in framework for C
 * Copyright 2006 Johannes Lehtinen
 *-----------------------------------------------------------------------*/

/** @file
 * Common defines shared by C-Pluff core C and C++ APIs.
 * This file is automatically included by the top level C and C++
 * API header files. There should be no need to include it explicitly.
 */

#ifndef CPLUFFDEF_H_
#define CPLUFFDEF_H_


/* ------------------------------------------------------------------------
 * Symbol visibility
 * ----------------------------------------------------------------------*/

/**
 * @defgroup symbolVisibility Symbol visibility
 * @ingroup defines
 *
 * Macros for controlling inter-module symbol visibility. Symbol visibility
 * between different modules (plug-ins and the client program) can be
 * controlled by these macros which have platform specific values.
 * The macros are used by the library implementation but it is
 * recommended that plug-in implementations would use them as well
 * for better portability.
 */
/*@{*/

/**
 * @def CP_EXPORTED
 * Declares an exported symbol. This macro should be placed at the start
 * of a global function or variable declaration to ensure that the symbol is
 * exported to other modules (plug-ins or the client program).
 */

/**
 * @def CP_HIDDEN
 *
 * Declares a hidden symbol. This macro should be placed at the start of
 * a global function or variable declaration to hide the symbol from other
 * modules (plug-ins or the client program). This macro is not intended to be
 * used with functions and variables declared as "static" which are
 * already internal to the object file. Some platforms do not
 * support hiding of symbols. Modules should therefore use unique prefixes for
 * global symbols internal to the module even when they are declared as hidden.
 */

#if defined(__WIN32__)
#if defined(CP_BUILD) && defined(DLL_EXPORT)
#define CP_EXPORTED __declspec(dllexport)
#elif !defined(CP_BUILD) && !defined(CP_STATIC)
#define CP_EXPORTED __declspec(dllimport)
#else
#define CP_EXPORTED
#endif
#define CP_HIDDEN
#elif defined(CP_BUILD) && (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3))
#define CP_EXPORTED __attribute__ ((visibility ("default")))
#define CP_HIDDEN __attribute__ ((visibility ("hidden")))
#else /* Not restricting link time visibility of non-API symbols */
#define CP_EXPORTED
#define CP_HIDDEN
#endif

/**
 * Explicitly marks a symbol declaration as being a part of the public API.
 * This is functionally equivalent to #CP_EXPORTED.
 */
#define CP_API CP_EXPORTED

/*@}*/


/* ------------------------------------------------------------------------
 * Version information
 * ----------------------------------------------------------------------*/

/**
 * @defgroup versionInfo Version information
 * @ingroup defines
 *
 * C-Pluff core version information. Notice that this version information
 * is static version information included in header files and can therefore
 * only be used for compile time checks. Corresponding runtime information can
 * be queried using ::cp_get_core_info.
 */
/*@{*/

/**
 * The C-Pluff release version string. This is the version of the C-Pluff
 * release providing the core facilities. Release version identifies a specific
 * version of the C-Pluff distribution and it is intended to be used by people.
 * Software should use the API version information for compatibility checks.
 */
#define CP_RELEASE_VERSION "@PACKAGE_VERSION@"

/**
 * The current version of the core C/C++ API. This is an integer number telling
 * the current version of the core API. It is incremented whenever there have
 * been changes to API interfaces.
 */
#define CP_CORE_API_VERSION @CP_CORE_API_CURRENT@

/**
 * The revision of the core C/C++ API. This is an integer number telling
 * the revision number of the current implementation. It is resetted to zero
 * for each new API version and incremented when only the implementation
 * changes but API interfaces remain the same.
 */
#define CP_CORE_API_REVISION @CP_CORE_API_REVISION@

/**
 * The backwards compatibility age of the core C/C++ API. This integer
 * number tells the backward compatibility age of the current
 * API. Subtracting the age from the current API version gives the earliest
 * backwards compatible API version. Software written for a backward
 * compatible API version should work with the current version but not
 * vice versa. The age is incremented together with the current API version
 * when new interfaces are added and it is resetted to zero if any interfaces
 * are removed or changed.
 */
#define CP_CORE_API_AGE @CP_CORE_API_AGE@

/*@}*/


#endif /*CPLUFFDEF_H_*/
